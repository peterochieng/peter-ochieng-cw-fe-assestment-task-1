import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Search } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { useIsMobile as useMobile } from "@/hooks/use-mobile";

interface TagListProps {
  title: string;
  tags: string[];
}

function TagList({ title, tags }: TagListProps) {
  return (
    <section className="mt-8 px-4 md:px-6 max-w-[960px] mx-auto" aria-labelledby={`${title.toLowerCase()}-section`}>
      <h2 id={`${title.toLowerCase()}-section`} className="text-white text-lg font-bold mb-4">{title}</h2>
      <div className="flex flex-wrap gap-3">
        {tags.map((tag) => (
          <Badge
            key={tag}
            variant="outline"
            className="px-4 py-[7px] bg-[#1C2126] text-[#9EABB8] hover:bg-[#3D4754] hover:text-white border-[#3D4754] rounded-full cursor-pointer transition-colors"
          >
            {tag}
          </Badge>
        ))}
      </div>
    </section>
  );
}

function HeroSection() {
  const isMobile = useMobile();
  
  const handleSearch = (search: string) => {
    console.log(search);
    // implementing the search logic is not required for this task
  };

  return (
    <section className="relative w-full max-w-[960px] mx-auto rounded-xl overflow-hidden mt-5">
      <div className="relative">
        <img 
          src="/task1/hero-bg.png" 
          alt="Abstract geometric background with warm wooden tones"
          className="w-full object-cover"
          style={{ height: isMobile ? '400px' : '480px' }}
        />
        <div 
          className="absolute inset-0" 
          style={{ 
            background: 'linear-gradient(rgba(0, 0, 0, 0), rgba(18, 20, 23, 0.85))' 
          }}
        ></div>
      </div>
      <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-4">
        <h1 className="text-3xl md:text-5xl font-bold text-white mb-8">
          Search for words, phrases and meanings
        </h1>
        <SearchBar initialValue="" onSearch={handleSearch} />
      </div>
    </section>
  );
}

interface SearchBarProps {
  initialValue: string;
  onSearch: (search: string) => void;
}

function SearchBar({
  initialValue,
  onSearch,
}: SearchBarProps) {
  const [searchValue, setSearchValue] = useState<string>(initialValue);

  // Only trigger search when user explicitly submits
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(searchValue);
  };

  // Update search value when initialValue prop changes
  useEffect(() => {
    setSearchValue(initialValue);
  }, [initialValue]);

  return (
    <form 
      onSubmit={handleSubmit} 
      className="flex items-center w-full max-w-[480px]"
    >
      <div className="relative w-full">
        <div className="flex items-center bg-[#1C2126] rounded-lg border border-[#3D4754] px-[15px] py-[7px] h-[64px] w-full">
          <Search className="text-[#9EABB8] mr-2 h-5 w-5 flex-shrink-0" />
          <Input
            value={searchValue}
            onChange={(e) => setSearchValue(e.target.value)}
            type="text"
            placeholder="Type to search..."
            className="flex-1 bg-transparent border-none text-white placeholder:text-[#9EABB8] focus-visible:ring-0 focus-visible:ring-offset-0 p-0 h-full"
            aria-label="Search input"
          />
        </div>
        <Button 
          type="submit" 
          className="absolute right-[7px] top-1/2 -translate-y-1/2 h-[48px] w-[96px] bg-[#0078D7] hover:bg-[#0066B5] text-white px-5 rounded-md"
        >
          Search
        </Button>
      </div>
    </form>
  );
}

function Header() {
  const [searchValue, setSearchValue] = useState<string>("");
  const isMobile = useMobile();
  
  return (
    <header className="flex items-center justify-between px-4 md:px-10 py-3 bg-[#121417] border-b border-[#9EABB8] h-[65px] mb-5">
      <div className="flex items-center gap-2">
        <img src="/task1/logo.png" alt="Worctionary Logo" className="w-10 h-10" />
        <div className="text-white font-semibold text-lg">Worctionary</div>
      </div>

      <div className="flex items-center gap-4 md:gap-8">
        {!isMobile && (
        <div className="relative hidden sm:block">
          <div className="absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
            <Search className="text-[#9EABB8] h-4 w-4" aria-hidden="true" />
          </div>
          <Input
            type="text"
            value={searchValue}
            onChange={(e) => setSearchValue(e.target.value)}
            placeholder="Search"
            className="pl-10 pr-4 py-2 bg-[#121417] text-[#9EABB8] border border-[#3D4754] focus-visible:ring-0 focus-visible:ring-offset-0 rounded-xl h-10 w-[160px]"
            aria-label="Search in header"
          />
        </div>
        )}
        <Avatar className="h-10 w-10 flex-shrink-0">
          <AvatarImage src="/task1/userprofile.png" alt="User profile" />
          <AvatarFallback>U</AvatarFallback>
        </Avatar>
      </div>
    </header>
  );
}

export default function App() {
  const trendingTags = [
    "NFT",
    "Metaverse",
    "Sustainable",
    "Sonder", 
    "FOMO",
    "Ghosting",
  ];
  
  const forYouTags = [
    "NFT",
    "Metaverse", 
    "Sustainable", 
    "Sonder",
    "FOMO",
    "Ghosting",
  ];

  return (
    <main className="bg-[#121417] min-h-screen text-white font-['Inter']">
      <Header />
      <HeroSection />
      <TagList title="Trending" tags={trendingTags} />
      <TagList title="For you" tags={forYouTags} />
    </main>
  );
}
